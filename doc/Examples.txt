/*----------------------------------------------------------------------------------------------------------------------
										Java ile Nesne Yönelimli Programlama

											   Eğitmen: Oğuz KARAN

										C ve Sistem Programcıları Derneği
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
	05.08.2023
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Java, hem programlama diline hem de ortamına (platform) verilen bir isimdir. Genel olarak kursumuzda Java dendiğinde
	programlama dili anlaşılacaktır. Ayrıca Java ortamı için JavaSE'de kullanılacaktır. Aslında JavaSE de genel bir
	terimdir.

	Java Ortamının Temel Özellikler:
	- Arakodlu çalışma sistemi: C ve C++ gibi dillerde yazılan programdan üretilen dosya (executable file)
	sistem düzeyinde (donanım, isletim sistemi vs.) çalışabilir. Örneğin, Windows işletim sistemi için üretilmiş
	bir program, Mac OS işletim sisteminde doğrudan çalıştırılamaz. O sistem için çalışabilir dosyanın ayrıca üretilmesi
	gerekir. Java'da yazılan programdan üretilen kod geneldir ve herhangi bir sisteme özgü değildir. Kendine ait
	standart formatı vardır. Bu şekilde üretilen dosyalara genel olarak "ara kod (intermediate code)" denir. Java özelinde
	bu arakoda "byte code" denir. Bu durumda byte code'u işletim sistemi çalıştıramaz. İşte bu durumda bu kodu çalıştıran
	işletim sistemine özgü ayrı bir program kullanılır. Bu programa genel olarak "Java Virtual Machine (JVM)" denir. Aslında
	sistem düzeyinde çalışan program budur. JVM arakodu yorumlayarak makine koduna (machine code) dönüştürür. Bu işleme
	"Just In Time Compilation (JIT)" denir. Böylesi bir tasarımın en büyük avantajı programın taşınabilirliğidir. Yani
	Java programcısı, programını bir kez yazar ve bir kez byte code'unu üretir ve bu byte her sistemde çalıştırılabilir.
	Şüphesiz bu durumun da istisnaları vardır. Ancak unutulmamalıdır ki, arakodlu çalışma sistemi görece yavaştır. Ancak
	bu yavaşlık Java'nın hedeflediği uygulamalar açısından önemsizdir. Geliştirme ve çalıştırma anlamında şu temel kavramlar
	önemlidir:
		- JVM (Java Virtual Machine): Byte code'u yorumlayarak aşağı seviyeli makine koduna dönüştürür. Aslında JVM
		byte code'un nasıl yorumlayanacağına yönelik soyut bir kavramdır.

		- JRE (Java Runtime Environment): genel olarak Java ile yazılmış bir uygulamayı çalıştırmak için gereken araçları ve
		uygulamaları içeren bir pakettir. Yani Java ile yazılmış bir programın çalıştırılabilmesi için JRE gereklidir.

		- JDK (Java Development Kit): Geliştirme (development) için kullanılan araçları barındıran bir pakettir. JDK içerisinde
		geliştirme yaparken kullanılmak üzere çalıştırma araçları da bulunur.

		Ticari kullanımlarda Java 11 ile birlikte bir takım değişiklikler yapılmıştır. Şu şekilde özetlenebilir: Genel olarak geliştirme ortamı
		ücretsizdir, çalıştırma ortamı ücretli olabilir ancak ücretsiz olanları da vardır. Bu konuların detayları vardır. Bu
		bölümde ele alınmayacaktır. Örneğin Oracle firmasının JRE'si ücretlidir ancak Open JRE denilen tamamen ücretsiz bir
		ortam da mevcuttur.

		Arakodlu çalışma sisteminin yukarıda anlatılan avantajına "Write Once Run Anywhere (WORA)" da denilmektedir.

	- Hızlı uygulama geliştirme ortamı: Java hızlı uygulama geliştirme (rapid application development) ortamı sunar. Bu anlamda
	ürün elde edilmesi daha çabuk olabilmektedir ve aynı zamanda öğrenmesi de görece kolay olabilmektedir.

	- Geniş bir sınıf kütüphanesi: Java'da (JavaSE'de) geniş bir sınıf kütüphanesi vardır. Veritabanı işlemleri, web programlama
	vb. için gereken bir çok sınıf hazır olarak bulunmaktadır.

	- Güvenli çalışma ortamı: Java'da yazılan programların, programcının yaptığı hatalardan dolayı sisteme zarar verme olasıkları
	çok çok azdır. Bu da güvenli bir çalışma ortamı sunmasına yol açar.
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	06.08.2023
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Programlama Dillerinin Sınıflandırılması: Programlama dilleri çeşitli şekillerde sınıflandırılabilse de genel olarak
	3 şekilde sınıflandırma eğilimi söz konusudur:
	1. Seviyelerine (level) göre sınıflandırma: Programlama dilinin seviyesi onun insan algısına yakınlığının ölçüsüdür. Yüksek
	seviyeli diller (high level languages) hem dil özellikleri, hem de uygulama geliştirme anlamında insan algısına yakınlıkları
	dolayısıyla daha kolay öğrenebilirler. Düşük seviyeli diller (low level languages) makineye daha yakın dillerdir. Olabilecek
	en düşük seviyeli dil makine dilidir.

	2. Kullanım alanlarına göre sınıflandırma: Dilin hangi alanlarda kullanılabileceğine göre sınıflandırmadır. Bazı diller
	birden fazla alanda kullanılabilirler. Bazı diller ise sadece bir alanda kullanılabilirler. Bu anlamda genel amaçlı diller,
	bilimsel ve mühendislik dilleri, veritabanı dilleri, yapay zeka dilleri, oyun ve animasyon dilleri vb. alanlar için diller
	söz konusu olabilmektedir.

	3. Programlama modeline göre sınıflandırma: Bir programı yazarken kullanılan genel model (paradigm) önemlidir. Bazı dillerde
	sınıf yoktur. Program çeşitli alt programların (function) bir araya getirilmesiyle yazılır. Bu modele "procedurel model"
	denir. Bazı dillerde sınıflar vardır ve programlar sınıflar kullanılarak yazılır. Başka bir çok kavramla birlikte sınıflar
	kullanılarak yazılan programlama modeline "nesne yönelimli model (object oriented model)" denir. Bazı dillerde programlar
	matematiksel formül yazıyormuş gibi yazılmaktadır. Bu tarz programlama modeline "fonksiyonel (functional)" model denir.
	Bazı diller birden fazla modeli desteklerler. Bu tarz dillere "multi paradigm languages" denilmektedir. Birden fazla modeli
	destekleyen diller, modellerin tüm özelliklerini desteklemeyebilir.

	Bu durumda Java, bilimsel ve mühendislik uygulamalarında, web uygulamalarında, yapay zeka uygulamalarında, mobil
	programlamada vb. kullanılabilen genel amaçlı, yüksek seviyeli, nesne yönelimli programlama modeli ile uygulama
	geliştirilebilen ve özellikle Java 8 ile birlike fonksiyonel programlama modelini de belirli ölçüde destekleyen
	"multi paradigm" bir dildir.

	Anahtar Notlar: Bir dilin bir çok alanda kullanılabilmesi, o dilin tüm alanlarında pratikte kullanılacağı anlamına gelmez.
	Bir alanda daha etkin kullanılabilen bir dil varsa o dil daha fazla tercih edilebilir.

	Anahtar Notlar: Yukarıda anlatılan kavramların detayları vardır. Zaman içerisinde anlaşılacaktır.
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Temel Kavramlar:
	Çevirici Programlar, Derleyiciler ve Yorumlayıcılar: Bir dilde yazılmış programı başka bir dile çeviren programlara
	çevirici programlar (translator) denir. Çevirici programlarda bir kaynak dil (source language) ve bir hedef dil (target/destination language)
	vardır. Kaynak dil yüksek seviyeli, hedef dil düşük seviyeli bir programlama diliyse bu durumda çevirici programa
	derleyici (compiler) denir. Örneğin Java programlama dilinden Kotlin programlama diline dönüştürme yapan program
	bir translator, Java programlama dilinden byte code'a dönüştürme yapan program ise bir compiler'dır. JVM'in byte code'u
	makine kodu makine koduna çevirme faaliyeti de bir derleme işlemidir. Bu sebeple buna JIT compilation denir. Bazı
	dillerde yazılan programlar herhangi bir kod üretilmeden çalıştırılırlar. Bu tarz dillerde yazılmış programları
	herhangi bir kod üretmeden çalıştıran programlara "interpreter" denir. Bazı diller hem derleyici hem yorumlayıcı ile
	kullanılabilirler. Java pratikte derleyici ile kullanılan Java 11 ile birlikte "java" programı yorumlayıcı olarak da
	java kodunu byte code üretilmeden çalıştırabilmektedir. Yorumlayıcı ile kullanılan diller derleyici ile kullanılan dillere
	göre daha yavaş olma eğilimindedir.

	Anahtar Notlar: Bir uygulama tek bir java dosyasından oluşmak zorunda değildir. Hatta bir Java uygulaması yalnızca
	java kodlarından da oluşmak zorunda değildir. Bu durumda farklı java dosyaları ayrı derlenir. Hatta aynı dosyada
	bulunan sınıflar da ayrı derlenir. Bir ürün aslında tüm birimlerinin uygun şekilde derlenmesi ve ele alınmasıyla
	elde edilir. Bu işleme genel olarak "build" terimi kullanılır. Build işlemi yalnızca derleme işlemi değildir. Yani
	bir uygulamanın ürün olarak elde edilmesi süreci "build" işlemidir. Burada anlatılanların da detayları zamanla
	ele alınacaktır.

	İşletim Sistemi (Operating System): Makinenin donanımını yöneten, bilgisayar ile kullanıcı arasında bir köprü oluşturan
	yazılımdır. Br işletim sisteminin pek çok görevi vardır. Programları çalıştırmak, çeşitli cihazları ve aygıtları yönetmek,
	dosyaları ve dizinleri (directory) organize etmek vb. görevler sayılabilir. İşletim sistemleri genel olarak iki gruba
	ayrılabilir: masaüstü işletim sistemleri (desktop operating systems), mobil işletim sistemleri (mobile operating systems).
	Şüphesiz başka çeşit işletim sistemleri de vardır. Popüler masaüstü işletim sistemleri Windows, Mac OS X, Unix ve Linux
	gibi işlemleridir. Popüler mobil işletim sistemleri Android ve IOS'dur.

	Açık kaynak kodlu yazılım, özgür yazılım ve mülkiyete sahip yazılım: Özgür yazılım (free software) ve açık kaynak kodlu
	(open source) yazılımlar arasında farklar olsa genel olarak aşağıdaki ortak özelliklere sahiptirler:
		- Bedavadır. Kullanılabilmesi için herhangi bir lisans gerekmez.
		- Kaynak kodlar sahiplenilemez. Kaynak koda ekleme yapıldığında ya da bir kaynak kod kullanıldığında kodlar kapatılamaz.
		Onların da açılması gerekir.
		- Çoğaltılabilir, izin almadan kullanılabilir.

	Bunun tam tersi olarak mülkiyete sahip (propriatery) yazlımlardır. Bu yazılımlar para verilerek kullanılır ve izin
	almadan çoğaltılamaz
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	IDE (Integrated Development Environment): Derleyicler ve yorumlayıcılar komut satırından çalışan ve basit arayüzlere
	sahip programlardır. Aslında teorik olarak bir uygulamadaki tüm Java dosyaları ve diğer dosyalar basit bir editör programla
	yazılıp komut satırından derlenebilir. Ancak bu uygulama büyüdükçe zahmetli olmaya başlar. Bu da programcıya zaman
	kaybettirir. Bu amaçla pratikte yazılm geliştirmeyi kolaylaştırmak için IDE denilen yazılımlar kullanılır. IDE'lerde
	örneğin bir takım yardımlar veren editörler, tasarım araçları, test araçları, debug araçları vb. programcının geliştirme
	sırasında kullandığı araçlar bulunur. Java ile uygulama geliştirmede iki tane IDE yoğun olarak kullanılmaktadır:
	Eclipse, IntelliJIDEA. Biz kursumuzda belirli bir zaman (yaklaşık kursun yarısına kadar) Eclipse, sonrasında IntelliJIDEA
	kullanacağız.
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	12.08.2023
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	JDK'nın kurulumu için işletim sistemine göre aşağıdaki şu link'den ilgili "installer" indirilebilir: 
	https://www.oracle.com/tr/java/technologies/downloads/. Burada LTS olması açısından 17 seçilebilir. Ya da en son
	versiyon seçilebilir. Dersin tarihinde en son versiyon JDK 20 'dir. Kursumuzda Java 17 özellikleri de konular
	içerisinde ele alınacağından en az Java 17 kurulumu önerilir. Java 17 öncesinde en az Java 11 olmalıdır. Kurulum
	aşamasından sonra java ve javac programları -version seçeneği ile çalıştırılarak versiyon kontrolü yapılabilir. 
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki programı çalıştırmak için JDK kurulu olan bir bilgisayarda aşağıdaki işlemlerin yapılması gerekir:
	1. Herhangi bir dizinde (directory/folder) csd isimli bir dizin açılır. Buradaki csd isminin tamamı küçük harf olacak
	şekilde yapılmalıdır.

	2. csd dizini içerisinde App.java isimli bir dosya açılır. Windows sisteminde uzantılar gizlenmişse görünür hale getirilip
	uzantının .java olduğuna dikkat ediniz. Buradaki dosya isminin de büyük küçük harf duyarlı olarak yazılması gerekir

	3. Komut yorumlayıcı program (command prompt or terminal) ile ilgili dizine geçilir. Dizin geçişleri için tüm sistemlerde
	aynı olan cd (change directory) komutu kullanılabilir. Örneğin: cd Dropbox/CSD/Kurslar/Java-Aug-2023/src/src-console

	4. Harhangi bir editör program ile App.java dosyasında aşağıdaki programı yazınız

	5. Komut yorumlayıcı programda, csd'nin bulunduğu dizinde aşağıdaki komutları çalıştırarak derleme işlemi yapılır:
		javac csd/App.java -> Windows dışı sistemler için
		javac csd\App.java -> Windows sistemi için
	Derleme işleminde herhangi bir hata (error) mesajı alınmazsa derleme işlemi başarılıdır ve App.class isminde byte code
	üretilir

	6. Komut yorumlayıcı programda aşağıdaki biçimde byte code çalıştırılır:
		java csd.App

	Anahtar Notlar: Yukarıdaki maddelerdek,i bazı zorunluluklar ilerideki konularda anlaşılacaktır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args) 
	{
		System.out.println("Hello, World");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Dil Kavramı: İletişimde kullanılan semboller topluluğudur. Bir dilin kurallarına "gramer" denir.  Gramerin pek çok
	bileşeni vardır. Bunlardan en önemlileri "sentaks (syntax) ve semantik (semaintic)" kavramlarıdır. Bir olgunun dil
	olabilmesi için en az sentaks ve semantiğesahip olması gerekir. Tersine sentaks ve semantiğe sahip olan bir olgu dildir. 

	Sentaks (sözdizim) doğru yazılmış ve doğru dizilmiş öğelere ilişkin kurallardır:
		"I am from Turkey"
	cümlesi sentaks olarak doğru yazılmıştır. Burada örneğin cümle "I from am Turkey" olarak yazılsaydı sentaks olarak
	hatalı olurdu. Java olarak bakarsak, örneğin
		System.out.println("Hello, World"); 
	cümlesinde noktalı virgül olmazsa sentaks hatası yapılmış olur. 

	Dildeki doğru yazılmış ve dizilmiş öğelerin ne anlam ifade ettiğine yönelik kurallara semantik kurallar denir. 

	Anahtar Notlar: Gramer'in daha çok doğal dillere özgü morfoloji gib başka bileşenleri de bulunur

	Bilgisayar Dilleri ve Programlama Dilleri: Bilgisayar sistemlerinde kullanılmak üzere tasarlanmış dillere bilgisayar 
	dilleri (computer languages) denir. Bir bilgisayar dilinde akış (flow) öğesi de varsa programlama dili (programming language)
	denir. Her programlama dili bir bilgisayar dilidir, her bilgisayar dili programlama dili değildir. Örneğin HTML, XML
	dilleri bilgisayar dilleridir ancak programlama dilleri değildir. Java'da bir akış olduğundan, programlama dilidir dolayısıyla
	bilgisayar dilidir
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Boşluk karakterleri (whitespace characters): Klavyeden basıldığında boşluk hissi veren karakterlerdir. Bu anlamda
	SPACE, ENTER ve TAB karakterleri klavyedeki tipik boşluk karakterleridir. 
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Atom (Token): Programlam dilinin parçalanamayan en küçük birimine denir. Burada parçalama terimi genel olarak boşluk
	karakterleri ile ayırma anlamında düşünülebilir. Java'da atomlar şunlardır:
	1. Anahtar Sözcükler (keywords/reserved words): Dile ait olan, herhangi bir şekilde tanıtılması gerekmeyen ve doğrudan
	değişken ismi olarak kullanılamayan atomlardır. Örneğin package, class, public, static, void.

	2. Değişkenler (variables/identifiers): İsmini programcının belirlediği ve isimlendirmesinde çeşitli kuralların bulunduğu
	atomlardır. Örneğin: csd, App, main, String, args, System, out, println.

	3. Sabitler (literals/constants): Program içerisinde doğrudan yazılan değerlere denir. Örneğin x = 10 ifadesinde 10 
	bir sabittir. 

	4. Operatörler (operators): Belirli işleme yol açan ve bu işlem sonucunda değer üreten atomlardır. 
	Örneğin, nokta (.), metot çağırma (()) operatörleri.

	5. String'ler (string literals/strings): İki tane iki tırnak (double quote) arasındaki yazılara tırnaklarıyla birlikte
	string denir. Örneğin, "Hello, World".

	6. Ayraçlar (delimiters/punctuators): Yukarıdakiler dışında kalan diğer atomlardır. Örneğin:;, {}, (), [].
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Java'da kod yazma kuralları:
	1. Atomlar arasında istenildiği kadar boşluk(whitespace) bırakılabilir
	2. Anahtar sözcükler ve değişken atomlar dışında, atomlar istenildiği kadar bitişik (aralarında boşluk olmayacak şekilde)
	yazılabilir. İki anahtar sözcük, iki değişken atom VEYA bir anahtar sözcük ve bir değişken atom bitişik yazılamaz
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------	
	Atomlar arasında istenildiği kadar boşluk bırakılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	






public static 









void main(String [






] args)
	{
		System.out





.println("Hello, World");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Anahtar sözcükler ve değişken atomlar dışında, atomlar istenildiği kadar bitişik (aralarında boşluk olmayacak şekilde)
	yazılabilir.
----------------------------------------------------------------------------------------------------------------------*/
package csd;class App{public static void main(String[]args){System.out.println("Hello, World");}}

/*----------------------------------------------------------------------------------------------------------------------
	İki anahtar sözcük, iki değişken atom VEYA bir anahtar sözcük ve bir değişken atom bitişik yazılamaz
----------------------------------------------------------------------------------------------------------------------*/
packagecsd;class App{public static void main(String [] args){System.out.println("Hello, World");}} //error

/*----------------------------------------------------------------------------------------------------------------------
	Anahtar Notlar: Yukarıdaki iki kural aslında programcının okunabilir/algılanabilir (readable) kodlar yazabilmesini
	sağlar. Bu anlamda şirketlerin kendilerine özgü yazım stillerini içeren kuralları bulunabilir. Bu kurallara 
	İnglizce olarak "coding convention" ya da "code style guide" gibi terimler kullanılabilir. Buradaki yazım stilleri
	şirketten şirkete farklılıklar ya da benzerlikler içerebilir. Burada C ve Sistem Programcıları Derneği'nin 
	yazım stili ile yazılacaktır. 
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Anahtar Notlar: Java'da "derleme zamanı (compile time)" ve "çalışma zamanı (run time)" denilen iki önemli kavram vardır.
	Derleme zamanı, derleme sürecine ilişkin işlemlere denir. Çalışma zamanı ise, byte code'un çalıştırılması sürecine 
	ilişkin işlemlere denir. Bu kavramlar birbirleriyle ilişkili olsalar da, ayrı kavramlardır. 
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	13.08.2023
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
	Derleyicinin Teşhis Mesajları (Diagnostics):
	1. Gerçek hatalar (Errors): Dilin sentaks ya da semantik kurallarına uyulmamasından dolayı verilen mesajlardır. Bu durumda
	"byte code" üretilmez. Programcının bu hataları düzeltip kodu derlemesi gerekir.

	2. Uyarılar (Warnings): Byte code'un üretimine engel olmayan, olası programlama ve mantık hatalarının bildirilmesi
	için verilen mesajlardır. Programcı bu uyarıları kesinlikle dikkate almalıdır. Özel bir durum yoksa uyarı mesajlarının
	oluşumuna yol açan kodlar düzeltilmeldir. Bazı durumlarda derleyicinin uyarı mesajı vermediği ancak IDE'nin kullandığı
	bir "static kod analizi aracları" konfigürasyonları gereği uyarı verebilir. Bunlar da dikkate alınmalıdır. Ancak hepsinin
	düzeltilmesi gerekmez. Tipik olarak ürün elde edilmesi aşamasında derleyici anlamında hiç bir uyarı mesajının olmaması gerekir.

	3. Ölümcül hatalar (Fatal errors): Derleme işleminin bile tamamlanmasını engelleyen hatalardır. Bu durumda programcının
	yazdığı kod açısından yapacak birşeyi yoktur. Çünkü kod henüz derlenmemiş bile olabilir. Programcının ölümcül hataya 
	yol açan durumu ortadan kaldırması gerekir. Örneğin diskte yer kalmaması, derlenecek dosyanın bulunamaması gibi durumlar
	ölümcül hatalara yol açar

	Programın çalışma zamanı sırasında oluşan hatalı durumlara genel olarak "exception" denir. Exception işlemleri
	ileride "exception handling" isimli bölümde ele alınacaktır. Bu konu ele alınana kadar exception oluştuğunda
	"program sonlanır" olarak anlaşılacaktır. Exception terimi yerine "run time error" da kullanılmaktadır. "error" dendiğinde
	"compile time error" anlaşılır
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Program içerisinde derleyicinin görmezden geleceği yazılara "yorum satırları (comment lines)" denir. Java'da iki
	çeşit yorum satırı kullanılmaktadır. Aşağıda örnekleri gösterilmiştir. İç içe yorum satırlarının kullanımında
	dikkatli olunmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

//App sınıfı
class App {
/*
	Burası da 
	derleyici tarafından dikkate alınmayacak
*/
	public static void main(String [] args) 
	{
		
		System.out.println("Hello, World"); //Burası derleyici tarafından dikkate alınmayacak
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Anahtar Notlar: Programcı yorum satırlarını gereksiz yere ve karışık olarak yazmamalıdır. Gereksiz ve karışık olarak
	yazılmış yorum satırlarının da okunabilirliği/algılanabilirliği olumsuz etkileyebileceği unutulmamalıdır.
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Anahtar Notlar: Java'da birden fazla ".java" dosyası ile çalışmanın bir takım ayrıntıları vardır. Bu sebeple 
	paketler konusuna kadar yalnızca tek bir ".java" dosyası (App.java) ile çalışacağız
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Anahtar Notlar: Programlama dili gibi formal olarak tasarlanmış kavramlar açıklanırken genel biçimlere ilişkin bir 
	takım yöntemler kullanılır. Özellikle bir takım standartlar BNF (Backus Neuer Form) notasyonu kullanırlar. 
	"Java Language Specification (JLS)" içerisinde de büyük ölçüde BNF kullanılmıiştır. BNF görece karmaşık bir yapıya 
	sahiptir. Özellikle başlangıç düzeyinde öğrenmek için kullanılması çok etkin bir yöntem değildir. Bu sebeple biz 
	kursumuzda BNF notasyonu kullanmayacağız. Biz açısal parantez köşeli parantez tekniğini kullanacağız. Bir genel 
	biçimde açısal parantez içerisine alınan bir bilgi zorunlu bir bilgi anlamına gelir, köşeli parantez içerisine 
	alınan bilgi ise seçenekli bir bilgi yani orada olmaya dabilir anlamına gelir. Şüphesiz olması ile olmaması aynı 
	anlamda olmak zorunda değildir. Açısal parantez veya köşeli parantez içerisine alınmamış her bilgi orda olması 
	gereken şeklinde anlamına gelir. Örneğin:
		package <paket ismi>;
	anlatımında package sözcüğü olması ve onu takip eden bir paket ismi bulunmalı anlamındadır. Ayrıca kodlar
	içerisinde //... biçimindeki gösterim de burada bir takım kodlar olabilir ancak şu durumda bizi ilgilendirmiyor
	anlamındadır. Ayrıca son 15 yıldır kaynaklarda (buna JSL de dahil) bir takım konular anlatılırken herhangi bir 
	senaryodan bağımsız olması anlamında isimlendirmede foo, bar, tar, car, zar gibi uydurma isimler kullanılmaktadır.
	Biz de konularımızda bu isimleri kullanacağız.
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Bildirim (declaration): Bir ismin derleyiciye tanıtılmasıdır. Yani derleyici bir ismin bildirimini arar 
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
	Bir Java programı genel olarak paketlerden, paketler sınıflardan, sınıflar da metotlardan oluşur. Paket bildiriminin
	genel biçimi şu şekildedir:
		package <paket ismi>;
	Paket ismi değişken isimlendirme kurallarına uygun herhangi bir isim olabilir. Örneğin:
		package csd;
	Paket bildirimi tüm diğer bildirimlerden önce yani tipik olarak kaynak kodun tepesinde bulunmalıdır. Bu sebeple bir 
	.java dosyasında yalnızca bir tane paket bildirimi bulunabilir. Paketler konusu ayrıntılı bir konudur. İleride detaylı 
	olarak ele alınacaktır. Sınıf bildiriminin genel biçimi şu şekildedir:
		[erişim belirleyici] class <sınıf ismi> {
			//...
		}
	Erişim belirleyici dışında başka sözcükler de olabilir. Erişim belirleyici ve diğerleri konular içerisinde ele
	alınacaktır. Sınıf ismi değişken isimlendirme kurallarına uygun herhangi bir isim olabilir. Sınıflar konusu da
	oldukça detaylı bir konudur. Neredeyse her konuda sınıflarla ilgili detaylar ele alınacaktır. Örneğin:
		class Sample {
			//...
		}
		
		class Person {
			//...
		}
		
		class SerialPort {
			//...
		}
	Java'da alt programlara metot (method) denir. Bir metodun ne iş yapacağının yani kodlarının yazılmasına 
	metot bildirimi (method declaration), kodlarının çalıştırılmasına ise metot çağrısı (method call) denir. Java'da
	bir metot bir sınıf içerisinde bildirilmek zorundadır. Metot bildiriminin genel biçimi şu şekildedir:
	  [erişim belirleyici] [static] <geri dönüş değeri> <metot ismi>([parametre değişkenleri])
	  {
	  		//...
	  }
	Erişim belirleyi şunlardan biri olabilir: public, protected, no-modifier, private. Burada no-modifier hiç bir şey
	yazmamak anlamındadır. Bu erişim belirleyicilerin hepsi farklı anlamdadır. İlgili konuya gelene kadar bir tüm
	metotlardaki erişim belirleyicileri public yapacağız. Java'da bir metot static veya non-static olarak bildirilebilir.
	Bir metodun bildiriminde static anahtar sözcüğü yazılırsa metot static olur. İlgili konuya gelene kadar tüm metotlarımızı
	static olarak bildireceğiz. Metodun kodlarının yazıldığı bölüme metodun gövdesi (method body) denir. static bir metodu 
	çağırmanın genel biçimi şu şekildedir:
		[paket ismi].[sınıf ismi].<metot ismi>([argümanlar]);
	Bir metot genel olarak başka bir metot içerisinde çağrılabilir. Akış java programına verilen sınıfın main metodundan
	başlar. main metodu bittiğinde akış sonlanır. Bizim bu kursdaki programlarımızda bir tane akış olduğundan main metodu
	bittiğinde program sonlanır. main metodu JVM tarafından akışı başlatmak üzere çağrılır. Bu anlamda akışı başlatmak
	için çağrılan main metoduna "giriş noktası (entry point)" denir. Bir metot çağrıldığında akış metodun kodlarına 
	dallanır ve metodun kodları çalıştırıldıktan sonra akış çağrılan noktaya geri döner. Metodun geri dönüş değeri
	yoksa void anahtar sözcüğü yazılır. Metodun ismi değişken isimlendirme kurallarına uygun herhangi bir isim olabilir.
	Metodun parametre değişkenleri olabilir. Metodun geri dönüş değeri ve parametre değişkenleri ileride ele
	alınacaktır. Yani aslında bir program main metodun çağrılmasıyla başlar ve bi rçok metodun çağrılması ile devam eder.
	print ve println'de birer metottur. Ancak bu metotlar static metot değildir. Bu sebeple System.out.print veya
	System.out.println çağrıları yukarıdaki biçimden farklıdır. Burada System bir sınıf, out bir referans, print ve prinln de
	birer metot ismidir. Detaylar şu an önemsizdir. Bu iki metot aldıkları yazıyı basarlar. println son yazdığı 
	karakterden sonra bir sonra satıra geçme karakterini de basar
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println("Hello World");
		csd.Sample.foo();
		csd.Sample.bar();
		csd.Mample.tar();
		System.out.println("Goodbye World");
	}
}

class Sample {
	public static void foo()
	{
		System.out.println("foo");
		csd.Mample.tar();
	}
	
	public static void bar()
	{
		System.out.println("bar");
	}
}

class Mample {
	public static void tar()
	{
		System.out.println("tar");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Çağıran metodun (caller) ait olduğu sınıf ile çağrılan metodun (callee) ait olduğu sınıf aynı pakette ise çağrı
	sırasında paket ismi yazılmayabilir. Çağıran metodun ait olduğu sınıf ile çağrılan metodun ait olduğu sınıf aynı ise
	paket ismi yazılmazsa sınıf ismi de yazılmayabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println("Hello World");
		Sample.foo();
		Sample.bar();
		Mample.tar();
		System.out.println("Goodbye World");
	}
}

class Sample {
	public static void foo()
	{
		System.out.println("foo");
		Mample.tar();		
	}
	
	public static void bar()
	{
		System.out.println("bar");
		foo();
	}
}

class Mample {
	public static void tar()
	{
		System.out.println("tar");
	}
}


/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/
